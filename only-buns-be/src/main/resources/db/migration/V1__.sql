CREATE TABLE comments
(
    id         INTEGER NOT NULL,
    post_id    INTEGER,
    user_id    BIGINT,
    content    TEXT    NOT NULL,
    created_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW() NOT NULL,
    CONSTRAINT pk_comments PRIMARY KEY (id)
);

CREATE TABLE likes
(
    id       INTEGER NOT NULL,
    post_id  INTEGER,
    user_id  BIGINT,
    liked_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW() NOT NULL,
    CONSTRAINT pk_likes PRIMARY KEY (id)
);

CREATE TABLE messages
(
    id           INTEGER NOT NULL,
    content      TEXT    NOT NULL,
    sent_at      TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW() NOT NULL,
    sender_id    BIGINT,
    recipient_id BIGINT,
    is_read      BOOLEAN DEFAULT FALSE,
    CONSTRAINT pk_messages PRIMARY KEY (id)
);

CREATE TABLE notifications
(
    id      INTEGER NOT NULL,
    user_id BIGINT,
    content TEXT    NOT NULL,
    sent_at TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW() NOT NULL,
    is_read BOOLEAN DEFAULT FALSE,
    CONSTRAINT pk_notifications PRIMARY KEY (id)
);

CREATE TABLE pet_care_locations
(
    id          INTEGER          NOT NULL,
    name        VARCHAR(255)     NOT NULL,
    latitude    DOUBLE PRECISION NOT NULL,
    longitude   DOUBLE PRECISION NOT NULL,
    description TEXT,
    CONSTRAINT pk_pet_care_locations PRIMARY KEY (id)
);

CREATE TABLE posts
(
    id          INTEGER NOT NULL,
    description TEXT    NOT NULL,
    image_url   VARCHAR(255),
    created_at  TIMESTAMP WITHOUT TIME ZONE DEFAULT NOW() NOT NULL,
    latitude    DOUBLE PRECISION,
    longitude   DOUBLE PRECISION,
    user_id     BIGINT,
    CONSTRAINT pk_posts PRIMARY KEY (id)
);

CREATE TABLE roles
(
    id   BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    name VARCHAR(255),
    CONSTRAINT pk_roles PRIMARY KEY (id)
);

CREATE TABLE user_followers
(
    user_id     INTEGER NOT NULL,
    follower_id INTEGER NOT NULL,
    CONSTRAINT pk_user_followers PRIMARY KEY (user_id, follower_id)
);

CREATE TABLE users
(
    id                       BIGINT GENERATED BY DEFAULT AS IDENTITY NOT NULL,
    username                 VARCHAR(100)                            NOT NULL,
    password                 VARCHAR(255)                            NOT NULL,
    email                    VARCHAR(255)                            NOT NULL,
    first_name               VARCHAR(100)                            NOT NULL,
    last_name                VARCHAR(100)                            NOT NULL,
    address                  VARCHAR(255),
    enabled                  BOOLEAN,
    last_password_reset_date TIMESTAMP WITHOUT TIME ZONE,
    activation_token         VARCHAR(255),
    role_id                  BIGINT,
    CONSTRAINT pk_users PRIMARY KEY (id)
);

ALTER TABLE users
    ADD CONSTRAINT uc_users_email UNIQUE (email);

ALTER TABLE users
    ADD CONSTRAINT uc_users_username UNIQUE (username);

ALTER TABLE comments
    ADD CONSTRAINT FK_COMMENTS_ON_POST FOREIGN KEY (post_id) REFERENCES posts (id) ON DELETE CASCADE;

ALTER TABLE comments
    ADD CONSTRAINT FK_COMMENTS_ON_USER FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE;

ALTER TABLE likes
    ADD CONSTRAINT FK_LIKES_ON_POST FOREIGN KEY (post_id) REFERENCES posts (id) ON DELETE CASCADE;

ALTER TABLE likes
    ADD CONSTRAINT FK_LIKES_ON_USER FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE;

ALTER TABLE messages
    ADD CONSTRAINT FK_MESSAGES_ON_RECIPIENT FOREIGN KEY (recipient_id) REFERENCES users (id) ON DELETE CASCADE;

ALTER TABLE messages
    ADD CONSTRAINT FK_MESSAGES_ON_SENDER FOREIGN KEY (sender_id) REFERENCES users (id) ON DELETE CASCADE;

ALTER TABLE notifications
    ADD CONSTRAINT FK_NOTIFICATIONS_ON_USER FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE;

ALTER TABLE posts
    ADD CONSTRAINT FK_POSTS_ON_USER FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE;

ALTER TABLE users
    ADD CONSTRAINT FK_USERS_ON_ROLE FOREIGN KEY (role_id) REFERENCES roles (id);

ALTER TABLE user_followers
    ADD CONSTRAINT FK_USER_FOLLOWERS_ON_FOLLOWER FOREIGN KEY (follower_id) REFERENCES users (id) ON DELETE CASCADE;

ALTER TABLE user_followers
    ADD CONSTRAINT FK_USER_FOLLOWERS_ON_USER FOREIGN KEY (user_id) REFERENCES users (id) ON DELETE CASCADE;